---
title: "Machine learning for remote sensing applications"
subtitle: "Mapping the MarburgOpenForest"
author: "Hanna Meyer"
date: "09/08/2022"

---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```





# Introduction
In this tutorial we will go through the basic workflow of training machine learning models for spatial mapping based on remote sensing.
To do this we will look at two case studies located in the MarburgOpenForest in Germany: one has the aim to produce a land cover map including different tree species; the other aims at producing a map of Leaf Area Index.

Based on "default" models, we will further discuss the relevance of different validation strategies and the area of applicability.




## How to start

For this tutorial we need the raster package for processing of the satellite data (note: needs to be replaced by terra soon) as well as the caret package as a wrapper for machine learning (here: randomForest) algorithms. Sf is used for handling of the training data available as vector data (polygons). Mapview is used for spatial visualization of the data. CAST will be used to account for spatial dependencies during model validation as well as for the estimation of the AOA.

```{r start, message=FALSE, warning=FALSE}
rm(list=ls())
#major required packages:
library(devtools)
install_github("HannaMeyer/CAST")
library(terra)
library(caret)
library(mapview)
library(sf)
library(CAST)
library(tmap)

```


# Case study 1: land cover classification

## Data preparation

To start with, let's load and explore the remote sensing raster data as well as the vector data that include the training sites.

### Raster data (predictor variables)

```{r load, message=FALSE,warning=FALSE}
mof_sen <- rast("data/sentinel_uniwald.grd")
print(mof_sen)
```


The raster data contain a subset of the optical data from Sentinel-2 (see band information here: https://en.wikipedia.org/wiki/Sentinel-2) given in scaled reflectances (B02-B11). In addition,the NDVI was calculated.
Let's plot the data to get an idea how the variables look like. 
 
```{r visPredictors, message=FALSE, warning= FALSE}
plot(mof_sen)
plotRGB(mof_sen,r=3,g=2,b=1,stretch="lin")
```

### Vector data (Response variable)
The vector file is read as sf object. It contains the training sites that will be regarded here as a ground truth for the land cover classification.

```{r loadPoly}
trainSites <- read_sf("data/trainingsites_LUC.gpkg")
```


Using mapview we can visualize the aerial image channels in the geographical context and overlay it with the polygons. Click on the polygons to see which land cover class is assigned to a respective polygon.

```{r visMV, warning=FALSE, message= FALSE}
mapview(as(mof_sen[[1]],"Raster"), map.types = "Esri.WorldImagery")+
  mapview(trainSites)
```

### Draw training samples and extract raster information

In order to train a machine learning model between the spectral properties and the land cover class, we first need to create a data frame that contains the predictor variables at the location of the training sites as well as the corresponding class information. However, using each pixel overlapped by a polygon would lead to a overly huge dataset, therefore, we first draw training samples from the polygon. Let's use 1000 randomly sampled (within the polygons) pixels as training data set.

```{r trainingsites, message=FALSE, warning= FALSE}
trainlocations <- st_sample(trainSites,1000)
trainlocations <- st_join(st_sf(trainlocations), trainSites)
mapview(trainlocations)
```

Next, we can extract the raster values for these locations. The resulting data frame contains the predictor variables for each training location that we can merged with the information on the land cover class from the sf object.

```{r extract, message=FALSE, warning= FALSE}
trainDat <- extract(mof_sen, trainlocations, df=TRUE)
trainDat <- data.frame(trainDat, trainlocations)
head(trainDat)
```


## Model training
### Predictors and response

For model training we need to define the predictor and response variables. As predictors we can use basically all information from the raster stack as we might assume they could all be meaningful for the differentiation between the land cover classes. As response variable we use the "Label" column of the data frame.

```{r vars, message=FALSE, warning= FALSE}
predictors <- names(mof_sen)
response <- "Type"
```


### A first "default" model
We then train a Random Forest model to lean how the classes can be distinguished based on the predictors (note: other algorithms would work as well. See https://topepo.github.io/caret/available-models.html for a list of algorithms available in caret). Caret's train function is doing this job. 

So let's see how we can then train a "default" random forest model. We specify "rf" as method, indicating that a Random Forest is applied. We reduce the number of trees (ntree) to 75 to speed things up. Note that usually a larger number (>250) is appropriate. 

```{r firstmodel, message=FALSE, warning= FALSE}
model <- train(trainDat[,predictors],
               trainDat[,response],
               method="rf",
               ntree=75)
model
```

To perform the classification we can then use the trained model and apply it to each pixel of the raster stack using the predict function. 

```{r firstpredict, message=FALSE, warning= FALSE}
prediction <- predict(mof_sen,model)

```

Then we can then create a map with meaningful colors of the predicted land cover using the tmap package.

```{r predvis, message=FALSE, warning= FALSE}
cols <- rev(c("palegreen", "blue", "grey", "red", "lightgreen", "forestgreen", "beige","brown","darkgreen","yellowgreen"))

tm_shape(prediction) +
  tm_raster(palette = cols,title = "LUC")+
  tm_scale_bar(bg.color="white",bg.alpha=0.75)+
  tm_layout(legend.bg.color = "white",
            legend.bg.alpha = 0.75)
```

Based on this we can now discuss more advanced aspects of cross-validation for performance assessment as well as spatial variable selection strategies.

### Model training with spatial CV and variable selection

Before starting model training we can specify some control settings using trainControl. For hyperparameter tuning (mtry) as well as for error assessment we use a spatial cross-validation. Here, the training data are split into 5 folds by trying to resemble the geographic distance distribution required when predicting the entire area from the trainign data,

```{r trainctrl, warning=FALSE, message=FALSE}
## define prediction area:
studyArea <- as.polygons(mof_sen, values = FALSE, na.all = TRUE) |>
    st_as_sf() |>
    st_transform(st_crs(trainlocations))|>
    st_union()
mapview(studyArea)



 indices <- knndm(trainlocations,studyArea,k=5)
gd <- geodist(trainlocations,studyArea,cvfolds = indices$indx_train )
plot(gd)+ scale_x_log10(labels=round)

ctrl <- trainControl(method="cv", 
                     index = indices$indx_train,
                     indexOut = indices$indx_test,
                     savePredictions = TRUE)
```

Model training is then again performed using caret's train function. However we use a wrapper around it that is selecting the predictor variables which are relevant for making predictions to new spatial locations (forward feature selection, fss).
We use the Kappa index as metric to select the best model.

```{r train, warning=FALSE, message=FALSE, results='hide'}
# train the model
set.seed(100)
model <- ffs(trainDat[,predictors],
             trainDat[,response],
             method="rf",
             metric="Kappa",
             trControl=ctrl,
             importance=TRUE,
             ntree=75,
             verbose=FALSE)
```

```{r trainresult, message=FALSE, warning= FALSE}
print(model)
plot(varImp(model))
```

### Model validation
When we print the model (see above) we get a summary of the prediction performance as the average Kappa and Accuracy of the three spatial folds. Looking at all cross-validated predictions together we can get the "global" model performance.

```{r valid_defaultmodel, message=FALSE, warning= FALSE}
# get all cross-validated predictions:
cvPredictions <- model$pred[model$pred$mtry==model$bestTune$mtry,]
# calculate cross table:
table(cvPredictions$pred,cvPredictions$obs)
```


### Visualize the final model predictions


```{r predict, message=FALSE, warning=FALSE}
prediction <- predict(mof_sen,model)
cols <- rev(c("palegreen", "blue", "grey", "red", "lightgreen", "forestgreen", "beige","brown","darkgreen","yellowgreen"))

tm_shape(prediction) +
  tm_raster(palette = cols,title = "LUC")+
  tm_scale_bar(bg.color="white",bg.alpha=0.75)+
  tm_layout(legend.bg.color = "white",
            legend.bg.alpha = 0.75)
```

## Area of Applicability
We have seen that technically, the trained model can be applied to the entire area of interest (and beyond...as long as the sentinel predictors are available which they are, even globally). But we should assess if we SHOULD apply our model to the entire area. The model should only be applied to locations that feature predictor properties that are comparable to those of the training data. If dissimilarity to the training data is larger than the dissimmilarity within the training data, the model should not be applied to this location.

```{r aoa, message=FALSE, warning= FALSE}

AOA <- aoa(mof_sen,model)
plot(AOA$AOA)
```

The result of the aoa function has two layers: the dissimilarity index (DI) and the area of applicability (AOA). The DI can take values from 0 to Inf, where 0 means that a location has predictor properties that are identical to properties observed in the training data. With increasing values the dissimilarity increases. The AOA has only two values: 0 and 1. 0 means that a location is outside the area of applicability, 1 means that the model is inside the area of applicability.



# Case Study 2: Modelling the Leaf Area Index
In the second example we will look at a regression task:
We have point measurements of Leaf area index (LAI), and, based in this,
we would like to make predictions for the entire forest.
Again, we will use the Sentinel data as potnetial predictors.

## Prepare data
```{r dataLAI, message=FALSE, warning= FALSE}
mof_sen <- rast("data/sentinel_uniwald.grd")
LAIdat <- st_read("data/trainingsites_LAI.gpkg")


trainDat <- extract(mof_sen,LAIdat,na.rm=TRUE)
trainDat$LAI <- LAIdat$LAI


meanmodel <- mof_sen[[1]]
values(meanmodel) <- mean(trainDat$LAI)
plot(meanmodel)

randommodel <- mof_sen[[1]]
values(randommodel)<- runif(ncell(randommodel),min = 0,4)

plot(randommodel)
```



## A simple linear model
As a simple first approach we might develop a linear model.
Let's assume a linear relationship between the NDVI and the LAI

```{r lm, message=FALSE, warning= FALSE}
plot(trainDat$NDVI,trainDat$LAI)
model_lm <- lm(LAI~NDVI,data=trainDat)
summary(model_lm)

abline(model_lm,col="red")

prediction_LAI <- predict(mof_sen,model_lm,na.rm=T)
plot(prediction_LAI)

limodelpred <- -0.8518+mof_sen$NDVI*6.8433
mapview(as(limodelpred,"Raster"))
```



## The machine learning way

### Define CV folds
Let's use the NNDM cross-validation approach.
```{r NNDMCV, message=FALSE, warning= FALSE}

studyArea <- as.polygons(mof_sen, values = FALSE, na.all = TRUE) |>
    st_as_sf() |>
    st_transform(st_crs(LAIdat))|>
    st_union()

nndm_folds <- knndm(LAIdat,studyArea,k=3)
```



Let's explore the geodistance

```{r plotgeodist, message=FALSE, warning= FALSE}
gd <- geodist(LAIdat,studyArea,cvfolds = nndm_folds$indx_test)
plot(gd)
```

### Model training

```{r rf_LAI, message=FALSE, warning= FALSE, results='hide'}

ctrl <- trainControl(method="cv",
                     index=nndm_folds$indx_train,
                     indexOut = nndm_folds$indx_test,
                    savePredictions = "all")


model_rf <- train(trainDat[,2:11],
                  trainDat$LAI,
                  method = "rf")



model <- ffs(trainDat[,predictors],
             trainDat$LAI,
             method="rf",
             trControl = ctrl,
             importance=TRUE,
             verbose=FALSE)

```

```{r rf_LAI_m, warning=FALSE, message=FALSE}
model
```

### LAI prediction
Let's then use the trained model for prediction.

```{r LAipredict, message=FALSE, warning= FALSE}
LAIprediction <- predict(mof_sen,model)
plot(LAIprediction)
```




<div class="alert alert-info">
  <strong>Question?!</strong> Why does it look so different than the linear model?
</div>




### AOA estimation
```{r LAI_AOA, message=FALSE, warning= FALSE}
AOA <- aoa(mof_sen,model_rf)
plot(AOA$AOA)
```



