---
title: "Collection of training data for remote sensing model building"
subtitle: "Tutorial: EON Summer School 2023"
author: Paul Magdon, University of Applied Sciences and Arts (HAWK)
date: "2023-08-29"
editor_options: 
  chunk_output_type: console
---



```{r setup}

#install.packages("devtools")
library(sf)
library(RStoolbox)
library(raster)
library(knitr)
library(ggplot2)
library(rmarkdown)
library(patchwork)
library(mapview)
library(kableExtra)
library(rmarkdown)
library("rprojroot")
```

# Data sets

In this tutorial we will work with a Sentinel-2 scene from 18/06/2022 from the
National Park, Harz. We will also use the boundary of the National Park to
define our study area. Before we can start you may download the S2 Scene from
the following link:
[S2-download](https://cloud.hawk.de/index.php/s/Sn2f8bg8GQEqJXR/download/S2B_MSIL2A_20220618T102559_N0400_R10_resampled_harz_np.tif).
Place this file into the data folder of this tutorial. 

```{r dataimport}
# create a string containing the current working directory
wd=paste0(find_rstudio_root_file(),"/paul_tutorial/data/")

#Import the boundary of the n
np_boundary = st_transform(st_read(paste0(wd,"nlp-harz_aussengrenze.gpkg")),25832)

s2  <- raster::brick(paste0(wd,"S2B_MSIL2A_20220618T102559_N0400_R10_resampled_harz_np.tif"))

names(s2)<-c('blue','green','red','vnir1','vnir2','vnir3','nir1','nir2','swir')

s2 <-raster::mask(s2,np_boundary)
```

# Anaylsing the spectral variablity within the study area


If we have no access to prior information on our target variable in the study
area we can use the spectral variability as a proxy for the variability of the
target variable. By using the spectral variability as a sampling criterion we 
also ensure, that we cover the spectral range with our sampling.

## Dimension reduction (PCA)

In a fist step we reduce the dimensions of the 9 Sentinel-2 bands while 
maintaining most of the information, using a principal component analysis (PCA).

```{r pca}

#PCA
pca<-RStoolbox::rasterPCA(s2,nSamples = 5000, spca=TRUE )

ggRGB(pca$map,1,2,3, stretch="lin", q=0)

```

From the output of the PCA we see that we can capture 92% of the variability
with the first two components. Thus we will only use the PC1 and PC2 for the 
subsequent analysis.

## Unsupervised clustering

In the next step we run an unsupervised classification of the PC1 and PC2 to get
a clustered map. For the unsupervised classification we need to take a decision
on the number of classes/clusters to be created. Here we will take n=5 classes.
However, depending on the target variable this value need to be adjusted.

```{r unsupervised}

set.seed(2222)
cluster <- unsuperClass(pca$map[[c('PC1','PC2')]], nSamples = 100, nClasses = 5, nStarts = 5)


## Plots
colors <- rainbow(5)
plot(cluster$map, col = colors, legend = TRUE, axes = TRUE, box =TRUE)
```

The map shows a clear spatial patterns related to the elevation, tree species
and vitality status of the Nationalpark forests.

# Create a stratified sample

In the next step we take a stratified random sample with $n=10$ points from each
of the 5 spectral classes.

```{r sampling}
samples <- sampleStratified(cluster$map,size = 10,na.rm=T,xy=T,sp=T)
samples$class <- as.factor(samples$class)
my.palette <- rainbow(5)
point.size <- 0.5

np.layer <- list("sp.polygons", as_Spatial(np_boundary))


spplot(samples,'class', col.regions = my.palette, sp.layout = np.layer,
    cex = point.size, main = "Stratified random sample for training")
```

We can now print the sample plot list as following:

```{r print, results='asis'}

kable(samples@data[c('x','y','class')], caption='Training plot list') %>%
  kable_styling(fixed_thead = T) %>% scroll_box(height = "400px")
```

## Implement a plot design

```{r plotDesign}
# Create a training data set by extracting the mean value of all pixels touching
# a buffered area with 13m around the plot center
train<-raster::extract(s2,samples,sp=T,buffer=13,fun='mean')
mapview(train, zcol="class",
        map.types = c("Esri.WorldShadedRelief", "OpenStreetMap.DE"))+
  mapview(np_boundary,alpha.regions = 0.2, aplha = 1)
```

# Compare the pixel value range between the sample and the image

```{r checkRange}
image.sample<-raster::sampleRandom(s2,size=100000)
image.sample<- as.data.frame(image.sample)
image.sample$group<-'image'

train.df<- train@data[,names(s2)]
train.df$group<-'train'

df <- rbind(image.sample,train.df)

blue <-ggplot(df, aes(blue,fill=group)) + theme_classic()+
        geom_histogram(
        aes(y=after_stat(density)),alpha=0.2, color='gray80',
        position='identity',bins=30)

green <-ggplot(df, aes(green,fill=group)) + theme_classic()+
        geom_histogram(
        aes(y=after_stat(density)),alpha=0.2, color='gray80',
        position='identity',bins=30)

nir1<-ggplot(df, aes(nir1,fill=group)) + theme_classic()+
      geom_histogram(
      aes(y=after_stat(density)),alpha=0.2, color='gray80',
      position='identity',bins=30)

swir<-ggplot(df, aes(swir,fill=group)) + theme_classic()+
      geom_histogram(
      aes(y=after_stat(density)),alpha=0.2, color='gray80',
      position='identity',bins=30)

blue+green+nir1+swir+plot_layout(ncol=2)
```
